#include "sort.h"
void quicksort_recursive(int *array, int low, int high, size_t size);
int partition(int *array, int low, int high, size_t size);
void swap(int *array, int a, int b);
/**
 * quick_sort - Sorts an array of integers using Bubble sort algorithm
 *
 * @array: array to be sorted
 * @size: size of array
 */
void quick_sort(int *array, size_t size)
{
	if (array == NULL || size < 2)
		return;
	quicksort_recursive(array, 0, size - 1, size);
}

void quicksort_recursive(int *array, int low, int high, size_t size)
{
	if (low < high)
	{
		int pivot_index = partition(array, low, high, size);
		quicksort_recursive(array, low, pivot_index - 1, size);
		quicksort_recursive(array, pivot_index + 1, high, size);
	}
}

int partition(int *array, int low, int high, size_t size)
{
	int start = array[low];
	int end = array[high];
	int pivot = array[low];

	while (start < end)
	{
		while (start <= pivot)
		{
			start++;
		}
		while (end > pivot)
		{
			end--;
		}
		if (start < end)
		{
			swap(array, start, end);
			print_array(array, size);
		}
	}
	swap(array, low, end);
	print_array(array, size);

	return end;
}
void swap(int *array, int a, int b)
{
	int temp;
	temp = array[a];
	array[a] = array[b];
	array[b] = temp;
}
